#
# Default JavaScript messages file.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# This is replaced during jar assembly from property string
# and should not be translated
implementation.version = @IMPLEMENTATION.VERSION@

#
# To add JavaScript error messages for a particular locale, create a
# new Messages_[locale].properties file, where [locale] is the Java
# string abbreviation for that locale.  For example, JavaScript
# messages for the Polish locale should be located in
# Messages_pl.properties, and messages for the Italian Swiss locale
# should be located in Messages_it_CH.properties.  Message properties
# files should be accessible through the classpath under
# org.mozilla.javascript.resources
#
# See:
# java.util.ResourceBundle
# java.text.MessageFormat
#

# SomeJavaClassWhereUsed

params.omit.non.js.object.warning = true

msg.non.js.object.warning =\
    RHINO USAGE WARNING: Missed Context.javaToJS() conversion: Rhino runtime detected object "{0}" of class "{1}" where it expected String, Number, Boolean or Scriptable instance. Please check your code for missing Context.javaToJS() call. \
	（RHINO USAGE WARNING: 缺少 Context.javaToJS() 转变: Rhino运行时检测到对象 "{0}" 的class是 "{1}" ，但我们希望他是 String, Number, Boolean 或者一个Scriptable的实例。请检查你的代码是否缺少调用Context.javaToJS()）

# Codegen
msg.dup.parms =\
    Duplicate parameter name "{0}".（重复的参数名称 "{0}".）

msg.too.big.jump =\
    Program too complex: too big jump offset.（程序过于复杂: 跳转的偏移太大）

msg.too.big.index =\
    Program too complex: internal index exceeds 64K limit.（程序过于复杂: 内部指标超过了64K的限制）

msg.while.compiling.fn =\
    Encountered code generation error while compiling function "{0}": {1}（编译函数 "{0}" 时发生代码生成错误: {1}）

msg.while.compiling.script =\
    Encountered code generation error while compiling script: （{0}编译插件时发生代码生成错误: {0}）

# Context
msg.ctor.not.found =\
    Constructor for "{0}" not found.（找不到满足 "{0}" 的构造方法）

msg.not.ctor =\
    "{0}" is not a constructor.（"{0}" 不是一个构造方法）

# FunctionObject
msg.varargs.ctor =\
    Method or constructor "{0}" must be static with the signature \
    "(Context cx, Object[] args, Function ctorObj, boolean inNewExpr)" \
    to define a variable arguments constructor.（方法或构造方法 "{0}" 参数必须是静态的 \
    你可以使用"(Context cx, Object[] args, Function ctorObj, boolean inNewExpr)" \
    来定义一个可变参数的构造方法）

msg.varargs.fun =\
    Method "{0}" must be static with the signature \
    "(Context cx, Scriptable thisObj, Object[] args, Function funObj)" \
    to define a variable arguments function.（方法 "{0}" 参数必须是静态的 \
    你可以使用"(Context cx, Scriptable thisObj, Object[] args, Function funObj)" \
    来定义一个可变参数的方法）

msg.incompat.call =\
    Method "{0}" called on incompatible object.（方法 "{0}" 在一个不兼容的对象上被调用了）

msg.bad.parms =\
    Unsupported parameter type "{0}" in method "{1}".（不支持的参数类型 "{0}" 在方法 "{1}" 中）

msg.bad.method.return =\
    Unsupported return type "{0}" in method "{1}".（不支持的返回类型 "{0}" 在方法 "{1}" 中）

msg.bad.ctor.return =\
    Construction of objects of type "{0}" is not supported.（构造生成的对象的 "{0}" 类型是不被支持的）

msg.no.overload =\
    Method "{0}" occurs multiple times in class "{1}".（方法 "{0}" 在class "{1}" 中出现了多次）

msg.method.not.found =\
    Method "{0}" not found in "{1}".（没有找到方法 "{0}" 在 "{1}" 中）

# IRFactory

msg.bad.for.in.lhs =\
    Invalid left-hand side of for..in loop.（for循环的左边非法）

msg.mult.index =\
    Only one variable allowed in for..in loop.（一个for循环中只允许有一个变量）

msg.bad.for.in.destruct =\
    Left hand side of for..in loop must be an array of length 2 to accept \
    key/value pair.（ for循环的左边必须是一个长度为2的数组来支持 \
    键/值的对.）
    
msg.cant.convert =\
    Can''t convert to type "{0}".（不能转换成类型 "{0}".）

msg.bad.assign.left =\
    Invalid assignment left-hand side.（左边非法的分配）

msg.bad.decr =\
    Invalid decrement operand.（非法的减法操作）

msg.bad.incr =\
    Invalid increment operand.（非法的加法操作）

msg.bad.yield =\
    yield must be in a function.（yield必须出现在一个函数中）

msg.yield.parenthesized =\
    yield expression must be parenthesized.（yield表达式必须被括号包裹起来）

# NativeGlobal
msg.cant.call.indirect =\
    Function "{0}" must be called directly, and not by way of a \
    function of another name.（函数 "{0}" 必须被直接地调用, 并且不能 \
    调用另一个名字的函数）

msg.eval.nonstring =\
    Calling eval() with anything other than a primitive string value will \
    simply return the value. Is this what you intended?（当你调用eval()函数并传入一个非字符串的参数时,它只会单纯地返回这个参数 \
    这是你想要的吗？）

msg.eval.nonstring.strict =\
    Calling eval() with anything other than a primitive string value is not \
    allowed in strict mode.（调用eval()函数并传入一个非字符串的参数在严格模式中不被允许）

msg.bad.destruct.op =\
    Invalid destructuring assignment operator（无效的解构赋值运算符）

# NativeCall
msg.only.from.new =\
    "{0}" may only be invoked from a "new" expression.（"{0}" 或许只能通过"new"表达式来调用）

msg.deprec.ctor =\
    The "{0}" constructor is deprecated.（"{0}" 这个构造方法已经被废弃了）

# NativeFunction
msg.no.function.ref.found =\
    no source found to decompile function reference {0}（没有任何资源可以用来反编译函数 {0}）

msg.arg.isnt.array =\
    second argument to Function.prototype.apply must be an array（Function.prototype.apply 的第二个函数只能是一个数组）

# NativeGlobal
msg.bad.esc.mask =\
    invalid string escape mask（无效字符串转义掩码）

# NativeJavaClass
msg.cant.instantiate =\
    error instantiating ({0}): class {1} is interface or abstract（无法实例化 ({0}): class {1} 是一个接口或者一个抽象类）

msg.bad.ctor.sig =\
    Found constructor with wrong signature: \
    {0} calling {1} with signature {2}（找到拥有错误签名的构造方法: \
    {0} 调用 {1} 使用签名 {2}）

msg.not.java.obj =\
    Expected argument to getClass() to be a Java object.（getClass()应该在一个Java对象上调用）

msg.no.java.ctor =\
    Java constructor for "{0}" with arguments "{1}" not found.（无法找到 "{0}" 的Java构造方法且拥有 "{1}" 的参数）

# NativeJavaMethod
msg.method.ambiguous =\
    The choice of Java method {0}.{1} matching JavaScript argument types ({2}) is ambiguous; \
    candidate methods are: {3}（Java方法 {0}.{1} 满足JavaScript参数 ({2}) 的有很多个 \
    这些待选的方法分别是: {3}）

msg.constructor.ambiguous =\
    The choice of Java constructor {0} matching JavaScript argument types ({1}) is ambiguous; \
    candidate constructors are: {2}（ Java构造方法 {0} 满足JavaScript参数 ({1}) 的有很多个 \
    这些待选的方法分别是: {2}）

# NativeJavaObject
msg.conversion.not.allowed =\
    Cannot convert {0} to {1}（不能将 {0} 转换为 {1}）

msg.no.empty.interface.conversion =\
    Cannot convert function to interface {0} with no methods（在没有任何方法的情况下, 不能将函数转换为接口 {0}）

msg.no.function.interface.conversion =\
    Cannot convert function to interface {0} since it contains methods with \
    different names（因为这个函数包含有不同名字的方法, 所以不能将函数转换为接口 {0} ）

msg.undefined.function.interface =\
    Property "{0}" is not defined in interface adapter（成员 "{0}" 在接口适配器中没有被定义）

msg.not.function.interface =\
    Property "{0}" is not a function in interface adapter（成员 "{0}" 在接口适配器中不是一个函数）

# NativeJavaPackage
msg.not.classloader =\
    Constructor for "Packages" expects argument of type java.lang.Classloader（"Packages" 的构造方法需要一个java.lang.ClassLoader作为参数）

# NativeRegExp
msg.bad.quant =\
    Invalid quantifier {0}（非法的量词 {0}）

msg.overlarge.backref =\
    Overly large back reference {0}（过度地引用 {0}）

msg.overlarge.min =\
    Overly large minimum {0}（过大的最小值 {0}）

msg.overlarge.max =\
    Overly large maximum {0}（过大的最大值 {0}）

msg.zero.quant =\
    Zero quantifier {0}（0量词 {0}）

msg.max.lt.min =\
    Maximum {0} less than minimum（最大值 {0} 比最小值小）

msg.unterm.quant =\
    Unterminated quantifier {0}（未结束的量词 {0}）

msg.unterm.paren =\
    Unterminated parenthetical {0}（未结束的括号句 {0}）

msg.unterm.class =\
    Unterminated character class {0}（未结束的字符组合 {0}）

msg.bad.range =\
    Invalid range in character class.（字符组合拥有非法范围）

msg.trail.backslash =\
    Trailing \\ in regular expression.（在正则表达式后面发现了 \\）

msg.re.unmatched.right.paren =\
    unmatched ) in regular expression.（正则表达式出现了未匹配的 )）

msg.no.regexp =\
    Regular expressions are not available.（正则表达式不可用）

msg.bad.backref =\
    back-reference exceeds number of capturing parentheses.（引用超出了括号的数目）

msg.bad.regexp.compile =\
    Only one argument may be specified if the first argument to \
    RegExp.prototype.compile is a RegExp object.（如果 RegExp.prototype.compile 的第一个参数是一个RegExp对象,  \
    那么参数应该只有一个）

msg.arg.not.object =\
    Expected argument of type object, but instead had type {0}（期望参数是一个Object对象, 但我们却发现了 {0}）

# NativeDate
msg.invalid.date =\
    Date is invalid.（日期非法）

msg.toisostring.must.return.primitive =\
    toISOString must return a primitive value, but instead returned "{0}"（toISOString 必须返回一个原始字符串, 但却返回了 "{0}"）

# Parser
msg.got.syntax.errors = \
    Compilation produced {0} syntax errors.（编译产生了 {0} 的语法错误）

msg.var.redecl =\
    TypeError: redeclaration of var {0}.（类型错误: 变量 {0} 被重复声明）

msg.const.redecl =\
    TypeError: redeclaration of const {0}.（类型错误: 常量 {0} 被重复声明）
    
msg.let.redecl =\
    TypeError: redeclaration of variable {0}.（类型错误: let临时变量 {0} 被重复声明）

msg.parm.redecl =\
	TypeError: redeclaration of formal parameter {0}.（类型错误: 形参 {0} 被重复声明）

msg.fn.redecl =\
    TypeError: redeclaration of function {0}.（类型错误: 函数 {0} 被重复声明）

msg.let.decl.not.in.block =\
    SyntaxError: let declaration not directly within block（语法错误: 不要直接用let在块内声明变量）

msg.bad.object.init =\
    SyntaxError: invalid object initializer（语法错误: 无效的对象初始化）

# NodeTransformer
msg.dup.label =\
    duplicated label（重复的标签）

msg.undef.label =\
    undefined label（未定义的标签）

msg.bad.break =\
    unlabelled break must be inside loop or switch（没有声明标签的break语句必须放在循环或switch中）

msg.continue.outside =\
    continue must be inside loop（continue必须放在循环中）

msg.continue.nonloop =\
    continue can only use labeles of iteration statements（continue只能用迭代语句标签）

msg.bad.throw.eol =\
    Line terminator is not allowed between the throw keyword and throw \
    expression.（throw xxx中间不能有换行）

msg.no.paren.parms =\
    missing ( before function parameters.（函数参数前缺少 (）

msg.no.parm =\
    missing formal parameter（缺少形参）

msg.no.paren.after.parms =\
    missing ) after formal parameters（形参后缺少 )）

msg.no.brace.body =\
    missing '{' before function body（函数体前缺少 '{'）

msg.no.brace.after.body =\
    missing } after function body（函数体后缺少 }）

msg.no.paren.cond =\
    missing ( before condition（条件语句前缺少 (）

msg.no.paren.after.cond =\
    missing ) after condition（条件语句前缺少 )）

msg.no.semi.stmt =\
    missing ; before statement（语句前缺少 ;）

msg.missing.semi =\
    missing ; after statement（语句后缺少 ;）

msg.no.name.after.dot =\
    missing name after . operator（.运算符后缺少名字）

msg.no.name.after.coloncolon =\
    missing name after :: operator（ ::运算符后缺少名字）

msg.no.name.after.dotdot =\
    missing name after .. operator（..运算符后缺少名字）

msg.no.name.after.xmlAttr =\
    missing name after .@（ .@后缺少名字）

msg.no.bracket.index =\
    missing ] in index expression（在下标表达式中缺少 ]）

msg.no.paren.switch =\
    missing ( before switch expression（switch表达式前缺少 (）

msg.no.paren.after.switch =\
    missing ) after switch expression（switch表达式前缺少 )）

msg.no.brace.switch =\
    missing '{' before switch body（switch主体前缺少 '{'）

msg.bad.switch =\
    invalid switch statement（非法的switch语句）

msg.no.colon.case =\
    missing : after case expression（case语句后缺少 :）

msg.double.switch.default =\
    double default label in the switch statement（一个switch语句中有两个default标签）

msg.no.while.do =\
    missing while after do-loop body（在do-loop的主体后缺少while）

msg.no.paren.for =\
    missing ( after for（在for语句后缺少 )）

msg.no.semi.for =\
    missing ; after for-loop initializer（for循环的初始化语句后面缺少 ;）

msg.no.semi.for.cond =\
    missing ; after for-loop condition（for循环的条件语句后面缺少 ;）
    
msg.in.after.for.name =\
    missing in after for（for循环后面缺少in）

msg.no.paren.for.ctrl =\
    missing ) after for-loop control（在for循环的控制语句后面缺少 )）

msg.no.paren.with =\
    missing ( before with-statement object（with语句的对象前面缺少 (）

msg.no.paren.after.with =\
    missing ) after with-statement object（ with语句的对象后面缺少 )）
    
msg.no.with.strict =\
    with statements not allowed in strict mode（在严格模式中不允许使用with语句）

msg.no.paren.after.let =\
    missing ( after let（let后面缺少 (）

msg.no.paren.let =\
    missing ) after variable list（在临时变量列表后缺少 )）

msg.no.curly.let =\
    missing } after let statement（在let语句后缺少 }）

msg.bad.return =\
    invalid return（非法的return语句）

msg.no.brace.block =\
    missing } in compound statement（复合词语句后缺少 }）

msg.bad.label =\
    invalid label（非法的标签）

msg.bad.var =\
    missing variable name（var缺少变量名）

msg.bad.var.init =\
    invalid variable initialization（非法的变量初始化）

msg.no.colon.cond =\
    missing : in conditional expression（条件表达式中缺少 :）

msg.no.paren.arg =\
    missing ) after argument list（参数表后缺少 )）

msg.no.bracket.arg =\
    missing ] after element list（元素表后缺少 ]）

msg.bad.prop =\
    invalid property id（非法的成员id）

msg.no.colon.prop =\
    missing : after property id（成员id后缺少 :）

msg.no.brace.prop =\
    missing } after property list（成员表后缺少 }）

msg.no.paren =\
    missing ) in parenthetical（表达式后缺少 )）

msg.reserved.id =\
    identifier is a reserved word（标识符是一个保留词）

msg.no.paren.catch =\
    missing ( before catch-block condition（在catch块的条件语句前缺少 (）

msg.bad.catchcond =\
    invalid catch block condition（非法的catch语句条件表达式）

msg.catch.unreachable =\
    any catch clauses following an unqualified catch are unreachable（不合格catch之后的任何catch子句都是不可访问的）

msg.no.brace.try =\
    missing '{' before try block（ try块前缺少 '{'）

msg.no.brace.catchblock =\
    missing '{' before catch-block body（catch块前缺少 '{'）

msg.try.no.catchfinally =\
    ''try'' without ''catch'' or ''finally''（''try'' 缺少 ''catch'' 或者 ''finally''）

msg.no.return.value =\
  function {0} does not always return a value（函数 {0} 并不总是返回一个值）

msg.anon.no.return.value =\
  anonymous function does not always return a value（匿名函数并不总是返回一个值）

msg.return.inconsistent =\
  return statement is inconsistent with previous usage（return语句与之前的用法不一致）

msg.generator.returns =\
  TypeError: generator function {0} returns a value（类型错误: 生成函数 {0} 返回了一个值）

msg.anon.generator.returns =\
  TypeError: anonymous generator function returns a value（类型错误: 匿名生成函数返回了一个值）

msg.syntax =\
    syntax error（语法错误）

msg.unexpected.eof =\
    Unexpected end of file（ 文件结束处非法）

msg.XML.bad.form =\
    illegally formed XML syntax（非法的XML表达式）

msg.XML.not.available =\
    XML runtime not available（XML运行时不可用）

msg.too.deep.parser.recursion =\
    Too deep recursion while parsing（解析中循环太深）

msg.too.many.constructor.args =\
    Too many constructor arguments（构造方法拥有太多的参数）

msg.too.many.function.args =\
    Too many function arguments（函数拥有太多的参数）

msg.no.side.effects =\
    Code has no side effects（代码没有副作用）

msg.extra.trailing.semi =\
    Extraneous trailing semicolon（多余的分号结尾）

msg.extra.trailing.comma =\
    Trailing comma is not legal in an ECMA-262 object initializer（在一个ECMA-262的对象初始化中尾部的逗号是不合法的）

msg.trailing.array.comma =\
    Trailing comma in array literal has different cross-browser behavior（在不同浏览器中数组表达式尾部的逗号有不同的意义）

msg.equal.as.assign =\
    Test for equality (==) mistyped as assignment (=)?（一个等于(==)运算符被写成了赋值运算符(=)?）

msg.var.hides.arg =\
    Variable {0} hides argument（变量 {0} 隐藏了参数）

msg.destruct.assign.no.init =\
    Missing = in destructuring declaration（在一个解构声明中缺少 =）

msg.no.old.octal.strict =\
    Old octal numbers prohibited in strict mode.（严格模式中不允许使用旧八进制数）

msg.dup.obj.lit.prop.strict =\
    Property "{0}" already defined in this object literal.（成员 "{0}" 已经在这个对象中被定义了）

msg.dup.param.strict =\
    Parameter "{0}" already declared in this function.（参数 "{0}" 在这个函数中已经被定义了）

msg.bad.id.strict =\
    "{0}" is not a valid identifier for this use in strict mode.（在严格模式中, "{0}" 不是一个合法的标识符）

# ScriptRuntime

# is there a better message for this? 
# it's currently only used as a poison pill for caller, caller and arguments properties
msg.op.not.allowed =\
    This operation is not allowed.（这个运算是不被允许的）

msg.no.properties =\
    {0} has no properties.（{0} 没有成员）

msg.invalid.iterator =\
    Invalid iterator value（非法的迭代器值）

msg.iterator.primitive =\
    __iterator__ returned a primitive value（__迭代器__ 返回了一个原始值）

msg.not.iterable = \
    {0} is not iterable（{0} 不能迭代）

msg.invalid.for.each = \
    invalid for each loop（非法的for-each循环）

msg.assn.create.strict =\
    Assignment to undeclared variable {0}（尝试给一个未定义的变量 {0} 赋值）

msg.ref.undefined.prop =\
    Reference to undefined property "{0}"（尝试引用一个未定义的变量 "{0}"）

msg.prop.not.found =\
    Property {0} not found.（找不到成员 {0}）

msg.set.prop.no.setter =\
    Cannot set property {0} that has only a getter.（不能给成员 {0} 设置值, 因为它只有一个getter）

msg.invalid.type =\
    Invalid JavaScript value of type {0}（非法的JavaScript值, 类型是 {0}）

msg.primitive.expected =\
    Primitive type expected (had {0} instead)（期待原始类型, 但我们发现了 {0}）

msg.namespace.expected =\
    Namespace object expected to left of :: (found {0} instead)（在 :: 的左边期望有一个命名空间对象, 但我们发现了 {0}）

msg.null.to.object =\
    Cannot convert null to an object.（不能将null转换为一个对象）

msg.undef.to.object =\
    Cannot convert undefined to an object.（不能将undefined转换为一个对象）

msg.cyclic.value =\
    Cyclic {0} value not allowed.（循环值 {0} 不被允许）

msg.is.not.defined =\
    "{0}" is not defined.（"{0}" 没有被定义）

msg.undef.prop.read =\
    Cannot read property "{1}" from {0}（不能从 {0} 中读取成员 "{1}"）

msg.undef.prop.write =\
    Cannot set property "{1}" of {0} to "{2}"（不能将 {0} 中的成员 "{1}" 设置成 "{2}"）

msg.undef.prop.delete =\
    Cannot delete property "{1}" of {0}（不能删除 {0} 中的成员 "{1}"）

msg.undef.method.call =\
    Cannot call method "{1}" of {0}（不能调用 {0} 中的方法 "{1}"）

msg.undef.with =\
    Cannot apply "with" to {0}（不能对 {0} 调用 with）

msg.isnt.function =\
    {0} is not a function, it is {1}.（{0} 不是一个函数, 它是 {1}.）

msg.isnt.function.in =\
    Cannot call property {0} in object {1}. It is not a function, it is "{2}".（不能调用 {1} 中的成员 {0}, 它不是一个函数, 它是 "{2}".）

msg.function.not.found =\
    Cannot find function {0}.（找不到函数 {0}.）

msg.function.not.found.in =\
    Cannot find function {0} in object {1}.（在 {1} 中找不到函数 {0}）

msg.isnt.xml.object =\
    {0} is not an xml object.（{0} 不是一个xml对象）

msg.no.ref.to.get =\
    {0} is not a reference to read reference value.（{0} 不是一个getter的引用）

msg.no.ref.to.set =\
    {0} is not a reference to set reference value to {1}.（{0} 不是 {1} 的setter的引用）

msg.no.ref.from.function =\
    Function {0} can not be used as the left-hand side of assignment \
    or as an operand of ++ or -- operator.（函数 {0} 不能用在一个赋值语句或++/--运算符的左边）

msg.bad.default.value =\
    Object''s getDefaultValue() method returned an object.（对象的 getDefaultValue() 返回了一个对象）

msg.instanceof.not.object = \
    Can''t use ''instanceof'' on a non-object.（不能对一个不是Object的对象使用 instanceof）

msg.instanceof.bad.prototype = \
    ''prototype'' property of {0} is not an object.（{0} 中的原型变量不是一个对象）

msg.in.not.object = \
    Can''t use ''in'' on a non-object.（不能对一个不是Object的对象使用in）

msg.bad.radix = \
    illegal radix {0}.（非法的基数 {0}.）

# ScriptableObject
msg.default.value =\
    Cannot find default value for object.（不能给这个对象找到默认的值）

msg.zero.arg.ctor =\
    Cannot load class "{0}" which has no zero-parameter constructor.（不能加载没有参数构造函数的类 "{0}"）

duplicate.defineClass.name =\
    Invalid method "{0}": name "{1}" is already in use.（非法的方法 "{0}": "{1}" 这个名字已经被使用了）

msg.ctor.multiple.parms =\
    Can''t define constructor or class {0} since more than one \
    constructor has multiple parameters.（不能给类 {0} 定义一个构造方法, 因为这个类拥有一个可变参数的构造方法）

msg.extend.scriptable =\
    {0} must extend ScriptableObject in order to define property {1}.（ 如果你想定义成员 {1}, {0} 必须继承自ScriptableObject）

msg.bad.getter.parms =\
    In order to define a property, getter {0} must have zero parameters \
    or a single ScriptableObject parameter.（如果你想定义一个成员, 那么getter {0} 必须没有参数或只有一个ScriptableObject的参数）

msg.obj.getter.parms =\
    Expected static or delegated getter {0} to take a ScriptableObject parameter.（期待一个授权或静态的getter来获取一个ScriptableObject实例）

msg.getter.static =\
    Getter and setter must both be static or neither be static.（Getter和setter必须都是静态的或者都不是静态的）

msg.setter.return =\
    Setter must have void return type: {0}（Setter必须没有返回值: {0}）

msg.setter2.parms =\
    Two-parameter setter must take a ScriptableObject as its first parameter.（有两个参数的setter必须将ScriptableObject作为它的第一个参数）

msg.setter1.parms =\
    Expected single parameter setter for {0}（期望这个setter有一个参数 {0}）

msg.setter2.expected =\
    Expected static or delegated setter {0} to take two parameters.（期待一个授权或静态的setter来获取一个ScriptableObject实例）

msg.setter.parms =\
    Expected either one or two parameters for setter.（一个setter只能有一个或者两个参数）

msg.setter.bad.type =\
    Unsupported parameter type "{0}" in setter "{1}".（ 参数类型 "{0}" 在setter "{1}" 中不被支持）

msg.add.sealed =\
    Cannot add a property to a sealed object: {0}.（无法为一个封闭的成员添加一个对象: {0}.）

msg.remove.sealed =\
    Cannot remove a property from a sealed object: {0}.（无法为一个封闭的成员删除一个对象: {0}.）

msg.modify.sealed =\
    Cannot modify a property of a sealed object: {0}.（无法修改一个封闭对象中的成员: {0}.）

msg.modify.readonly =\
    Cannot modify readonly property: {0}.（无法修改一个只读的成员: {0}.）

msg.both.data.and.accessor.desc =\
    Cannot be both a data and an accessor descriptor.（不能同时成为一个数据和一个寄存器的解释符号）

msg.change.configurable.false.to.true =\
    Cannot change the configurable attribute of "{0}" from false to true.（不能将 "{0}" 中的可变性属性从false改变成true）

msg.change.enumerable.with.configurable.false =\
    Cannot change the enumerable attribute of "{0}" because configurable is false.（不能改变这个可枚举的属性 "{0}" 因为它的可变性是false）

msg.change.writable.false.to.true.with.configurable.false =\
    Cannot change the writable attribute of "{0}" from false to true because configurable is false.（不能将 "{0}" 中的可写属性从false改变成true, 因为它的可变性是false）

msg.change.value.with.writable.false =\
    Cannot change the value of attribute "{0}" because writable is false.（不能改变属性 "{0}" 的值, 因为它的可写性为false）

msg.change.getter.with.configurable.false =\
    Cannot change the get attribute of "{0}" because configurable is false.（不能更改 "{0}" 的set属性, 因为它的可变性是false）

msg.change.setter.with.configurable.false =\
    Cannot change the set attribute of "{0}" because configurable is false.（不能更改 "{0}" 的get属性, 因为它的可变性是false）

msg.change.property.data.to.accessor.with.configurable.false =\
    Cannot change "{0}" from a data property to an accessor property because configurable is false.（不能将 "{0}" 从一个数据变成一个寄存器, 因为它的可变性为false）

msg.change.property.accessor.to.data.with.configurable.false =\
    Cannot change "{0}" from an accessor property to a data property because configurable is false.（不能将 "{0}" 从一个寄存器变成一个数据, 因为它的可变性为false）

msg.not.extensible =\
    Cannot add properties to this object because extensible is false.（不能向这个成员中添加对象, 因为它的可扩张性为false）

msg.delete.property.with.configurable.false =\
    Cannot delete "{0}" property because configurable is false.（不能删除 "{0}" 的成员, 因为它的可变性为false）

# TokenStream
msg.missing.exponent =\
    missing exponent（缺少指数）

msg.caught.nfe =\
    number format error（数字格式化错误）

msg.unterminated.string.lit =\
    unterminated string literal（未结束的字符串表达式）

msg.unterminated.comment =\
    unterminated comment（未结束的分号）

msg.unterminated.re.lit =\
    unterminated regular expression literal（未结束的正则表达式）

msg.invalid.re.flag =\
    invalid flag after regular expression（正则表达式后出现非法的标识）

msg.no.re.input.for =\
    no input for {0}（没有对于 {0} 的输入）

msg.illegal.character =\
    illegal character（非法字符）

msg.invalid.escape =\
    invalid Unicode escape sequence（ 非法的Unicode字符掩码）

msg.bad.namespace =\
    not a valid default namespace statement. \
    Syntax is: default xml namespace = EXPRESSION;（ 不是一个有效的default命名空间语句 \
    语法是: default xml namespace = 表达式;）

# TokensStream warnings
msg.bad.octal.literal =\
    illegal octal literal digit {0}; interpreting it as a decimal digit（非法的八进制数 {0}; 我们把他解释为一个小数）

msg.reserved.keyword =\
    illegal usage of future reserved keyword {0}; interpreting it as ordinary identifier（这是一个未来保留字 {0}; 我们将它解释为一个原始的标识符）

# LiveConnect errors
msg.java.internal.field.type =\
    Internal error: type conversion of {0} to assign to {1} on {2} failed.（内部错误: 在 {2} 上将 {0} 的类型转换为 {1} 失败）

msg.java.conversion.implicit_method =\
    Can''t find converter method "{0}" on class {1}.（不能找到转换方法 "{0}" 在class {1} 中）

msg.java.method.assign =\
    Java method "{0}" cannot be assigned to.（Java方法 "{0}" 不能被赋值）

msg.java.internal.private =\
    Internal error: attempt to access private/protected field "{0}".（内部错误: 尝试访问一个private/protected的成员 "{0}"）

msg.java.no_such_method =\
    Can''t find method {0}.（无法找到方法 {0}.）

msg.script.is.not.constructor =\
    Script objects are not constructors.（插件对象不是一个构造方法）

msg.nonjava.method =\
    Java method "{0}" was invoked with {1} as "this" value that can not be converted to Java type {2}.（Java方法 "{0}" 在调用时使用了 {1} 作为"this"值, 但它不能转换为一个Java类型 {2}）

msg.java.member.not.found =\
    Java class "{0}" has no public instance field or method named "{1}".（Java类 "{0}" 没有一个叫做 "{1}" 的公共成员或方法）

msg.java.array.index.out.of.bounds =\
    Array index {0} is out of bounds [0..{1}].（数组下标 {0} 超出了范围 [0..{1}].）

msg.java.array.member.not.found =\
    Java arrays have no public instance fields or methods named "{0}".（Java数组 "{0}" 没有一个叫做 "{1}" 的公共成员或方法）

msg.pkg.int =\
    Java package names may not be numbers.（Java包的名字不会是数字）

msg.access.prohibited =\
    Access to Java class "{0}" is prohibited.（尝试访问一个不可访问的Java类 "{0}"）

# ImporterTopLevel
msg.ambig.import =\
    Ambiguous import: "{0}" and and "{1}".（模棱两可的import: "{0}" 和 "{1}".）

msg.not.pkg =\
    Function importPackage must be called with a package; had "{0}" instead.（函数importPackage必须传入一个包参数, 而你传入了 "{0}"）

msg.not.class =\
    Function importClass must be called with a class; had "{0}" instead.（函数importClass必须传入一个类, 而你传入了 "{0}"）

msg.not.class.not.pkg =\
    "{0}" is neither a class nor a package.（"{0}" 既不是一个类也不是一个包）

msg.prop.defined =\
    Cannot import "{0}" since a property by that name is already defined.（不能导入 "{0}", 因为已经有另一个和它同名的成员了）

#JavaAdapter
msg.adapter.zero.args =\
    JavaAdapter requires at least one argument.（JavaAdapter需要至少一个参数）

msg.not.java.class.arg = \
Argument {0} is not Java class: {1}.（参数 {0} 不是一个Java类: {1}.）

#JavaAdapter
msg.only.one.super = \
Only one class may be extended by a JavaAdapter. Had {0} and {1}.（只有一个类可以继承自JavaAdapter, 但现在有 {0} 和 {1}）


# Arrays
msg.arraylength.bad =\
    Inappropriate array length.（不适当的数组长度）

# Arrays
msg.arraylength.too.big =\
    Array length {0} exceeds supported capacity limit.（数组长度 {0} 超过容量限制）

msg.empty.array.reduce =\
    Reduce of empty array with no initial value（你尝试缩小一个空数组）

# URI
msg.bad.uri =\
    Malformed URI sequence.（畸形的URI字符串）

# Number
msg.bad.precision =\
    Precision {0} out of range.（精度 {0} 超出范围）

# NativeGenerator
msg.send.newborn =\
  Attempt to send value to newborn generator（尝试发送一个值到一个新生的生成器）

msg.already.exec.gen =\
    Already executing generator（已经执行了生成器）
    
msg.StopIteration.invalid =\
    StopIteration may not be changed to an arbitrary object.(停止迭代不能变成一个任意的对象)

# Interpreter
msg.yield.closing =\
  Yield from closing generator(Yield出现在一个关闭中的生成器)

msg.called.null.or.undefined=\
  {0}.prototype.{1} method called on null or undefined({0}.prototype.{1} 方法被调用在一个null或undefined上)

msg.first.arg.not.regexp=\
  First argument to {0}.prototype.{1} must not be a regular expression({0}.prototype.{1} 的第一个参数不能是一个正则表达式)

msg.arrowfunction.generator =\
  arrow function can not become generator(箭头函数不能成为一个生成器)

# Arguments
msg.arguments.not.access.strict =\
  Cannot access "{0}" property of the arguments object in strict mode.(在严格模式中, 不能从一个参数对象中访问成员 "{0}" )
  
  
# Symbol support
msg.object.not.symbolscriptable =\
    Object {0} does not support Symbol keys （对象 {0} 不支持符号键）

msg.no.assign.symbol.strict =\
    Symbol objects may not be assigned properties in strict mode（在严格模式中, 符号成员不能被赋值为一个对象）

msg.not.a.string =\
      The object is not a string（这个对象不是一个字符串）

msg.not.a.number =\
     The object is not a number（这个对象不是一个数字）

msg.no.symbol.new =\
    Symbol objects may not be constructed using \"new\"（一个符号对象不能使用new来创建）

msg.compare.symbol =\
    Symbol objects may not be compared（一个符号对象不能用来比较）
